subprojects {
    apply plugin: 'java'
    sourceSets.main.resources { srcDir 'src/generated/resources' }

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()

    jar {
//        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        manifest {
            attributes([
                    "Specification-Title"     : project.name,
                    "Specification-Vendor"    : project.group,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : project.group,
                    "Implementation-URL"      : "http://journeymap.info",
                    "Implementation-Timestamp": getDate()
            ])
        }
    }

    repositories {

        mavenCentral()

        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = "JourneyMap (Public)"
            url = "https://jm.gserv.me/repository/maven-public/"
        }
        maven {
            url "https://www.cursemaven.com"
        }

        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
    }

    dependencies {
        // for annotations
        implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

        testImplementation 'junit:junit:4.12'
        testImplementation 'org.mockito:mockito-inline:4.10.+'

    }


    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }


    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}


def getDate() {
    def date = new Date()
    def formattedDate = date.format(project.dateFormat)
    return formattedDate
}
