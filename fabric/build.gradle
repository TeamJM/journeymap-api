/*
 * JourneyMap API (http://journeymap.info)
 * http://github.com/TeamJM/journeymap-api
 *
 * Copyright (c) 2011-2016 Techbrew.  All Rights Reserved.
 * The following limited rights are granted to you:
 *
 * You MAY:
 *  + Write your own code that uses the API source code in journeymap.* packages as a dependency.
 *  + Write and distribute your own code that uses, modifies, or extends the example source code in example.* packages
 *  + Fork and modify any source code for the purpose of submitting Pull Requests to the TeamJM/journeymap-api repository.
 *    Submitting new or modified code to the repository means that you are granting Techbrew all rights to the submitted code.
 *
 * You MAY NOT:
 *  - Distribute source code or classes (whether modified or not) from journeymap.* packages.
 *  - Submit any code to the TeamJM/journeymap-api repository with a different license than this one.
 *  - Use code or artifacts from the repository in any way not explicitly granted by this license.
 *
 */

/* Repos */
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }
}
plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}
/* Gradle Plugins */
apply plugin: 'com.jfrog.bintray'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group 'info.journeymap'

/* Artifact Version */
version = "${project.api_version}-${project.minecraft_version}"
if (project.snapshot) {
    version = version + "-SNAPSHOT"
}
archivesBaseName = "${project.mod_name}" + "-fabric"
configurations {
    testmodImplementation.extendsFrom implementation
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

repositories {
    maven {
        url "https://www.cursemaven.com"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    // for annotations
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    compileOnly project(":common")
    testmodImplementation sourceSets.main.output
}
/* Replace tokens in resources files */
processResources
        {
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft_version

            // replace stuff in mcmod.info on copy
            filesMatching("fabric.mod.json") {
                expand 'version': project.version, 'mcversion': project.minecraft_version
            }
        }

/* Use the same compile and runtime classpath in the Example Mod */
sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

/* Add our attributes to every Jar task */
jar {
    manifest {
        attributes = [
                "Manifest-Version"      : "1.0",
                "Implementation-Title"  : project.title,
                "Implementation-Version": project.version,
                "Implementation-URL"    : project.git_website
        ]
    }
}

/* Javadoc properties */
javadoc {
    title = project.title_javadoc
}

def bintrayUser = project.findProperty("bintray.user") ?: System.getenv("BINTRAY_USER")
def bintrayKey = project.findProperty("bintray.password") ?: System.getenv("BINTRAY_PASSWORD")

if (project.hasProperty("production")) {
    // Bintray is _only_ for releases, not snapshots
    bintray {
        user = bintrayUser
        key = bintrayKey

        pkg {
            name = "api"
            repo = "JourneyMap"
            userOrg = "teamjm"

            publications = ["maven"]

            version {
                name = project.version
                released = new Date()
            }
        }
    }
}

publishing {
    repositories {
        maven {
            name = "JourneyMap"
            url = uri("https://jm.gserv.me/repository/maven-snapshots/")

            credentials {
                username = project.findProperty("journeymap.user") ?: System.getenv("JOURNEYMAP_USER")
                password = project.findProperty("journeymap.password") ?: System.getenv("JOURNEYMAP_PASSWORD")
            }

            version = project.version
        }
    }

    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version

            from(components["java"])
        }
    }
}
