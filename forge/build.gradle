/*
 * JourneyMap API (http://journeymap.info)
 * http://github.com/TeamJM/journeymap-api
 *
 * Copyright (c) 2011-2016 Techbrew.  All Rights Reserved.
 * The following limited rights are granted to you:
 *
 * You MAY:
 *  + Write your own code that uses the API source code in journeymap.* packages as a dependency.
 *  + Write and distribute your own code that uses, modifies, or extends the example source code in example.* packages
 *  + Fork and modify any source code for the purpose of submitting Pull Requests to the TeamJM/journeymap-api repository.
 *    Submitting new or modified code to the repository means that you are granting Techbrew all rights to the submitted code.
 *
 * You MAY NOT:
 *  - Distribute source code or classes (whether modified or not) from journeymap.* packages.
 *  - Submit any code to the TeamJM/journeymap-api repository with a different license than this one.
 *  - Use code or artifacts from the repository in any way not explicitly granted by this license.
 *
 */

/* Repos */
buildscript {
    repositories {
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
    }
}

/* Gradle Plugins */
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

group 'info.journeymap'


/* Artifact Version */
version = "${project.api_version}-${project.minecraft_version}"
if (project.snapshot) {
    version = version + "-SNAPSHOT"
}
archivesBaseName = "${project.mod_name}" + "-forge"
def modVersion = project.api_version

configurations {
    testmodImplementation.extendsFrom implementation
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

repositories {
    maven {
        url "https://www.cursemaven.com"
    }
}

/* ForgeGradle spec for Minecraft */
minecraft {
    mappings channel: project.channel, version: project.mappings
    runs {
        client = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'info'
            workingDirectory project.file('run/client').canonicalPath
            source sourceSets.main
        }
        server = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
    }
}
dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    runtimeOnly fg.deobf("curse.maven:journeymap-${project.jm_project_id}:${project.forge_jm_file_id}")

    compileOnly project(":shared")
    testmodImplementation sourceSets.main.output
}

/* Replace tokens in resources files */
processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft_version

    // replace stuff in mods.toml on copy
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version,
                'mcversion': project.minecraft_version,
                'modVersion': modVersion
    }
}

/* Use the same compile and runtime classpath in the Example Mod */
sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

/* Reobfuscated jar for just the Example Mod */
jar {
    manifest {
        attributes = ["Manifest-Version"      : "1.0",
//                "FMLModType"            : "GAMELIBRARY",
                      "Implementation-Title"  : project.title,
                      "Implementation-Version": project.version,
                      "Implementation-URL"    : project.git_website]
    }
}

/* Javadoc properties */
javadoc {
    title = project.title_javadoc
}

tasks.withType(JavaCompile).configureEach {
    source(project(":shared").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":shared").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":shared").sourceSets.main.allSource)
}

jar.finalizedBy('reobfJar')


publishing {
    repositories {
        maven {
            name = "JourneyMap"
            url = uri("https://jm.gserv.me/repository/maven-snapshots/")

            credentials {
                username = project.findProperty("journeymap.user") ?: System.getenv("JOURNEYMAP_USER")
                password = project.findProperty("journeymap.password") ?: System.getenv("JOURNEYMAP_PASSWORD")
            }

            version = project.version
        }
    }

    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar

            artifact project.sourcesJar {
                archiveClassifier.set("sources")
            }

            artifact project.javadocJar {
                archiveClassifier.set("javadoc")
            }
        }
    }
}
