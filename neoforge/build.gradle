/*
 * JourneyMap API (http://journeymap.info)
 * http://github.com/TeamJM/journeymap-api
 *
 * Copyright (c) 2011-2016 Techbrew.  All Rights Reserved.
 * The following limited rights are granted to you:
 *
 * You MAY:
 *  + Write your own code that uses the API source code in journeymap.* packages as a dependency.
 *  + Write and distribute your own code that uses, modifies, or extends the example source code in example.* packages
 *  + Fork and modify any source code for the purpose of submitting Pull Requests to the TeamJM/journeymap-api repository.
 *    Submitting new or modified code to the repository means that you are granting Techbrew all rights to the submitted code.
 *
 * You MAY NOT:
 *  - Distribute source code or classes (whether modified or not) from journeymap.* packages.
 *  - Submit any code to the TeamJM/journeymap-api repository with a different license than this one.
 *  - Use code or artifacts from the repository in any way not explicitly granted by this license.
 *
 */

/* Repos */
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'net.neoforged.gradle.userdev' version '[7.0.5,)'
}
/* Gradle Plugins */

apply plugin: 'eclipse'
apply plugin: 'maven-publish'

group 'info.journeymap'


/* Artifact Version */
version = "${project.api_version}-${project.minecraft_version}"
if (project.snapshot) {
    version = version + "-SNAPSHOT"
}
archivesBaseName = "${project.mod_name}" + "-neoforge"
def modVersion = project.api_version

configurations {
    testmodImplementation.extendsFrom implementation
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

repositories {
    maven {
        url "https://www.cursemaven.com"
    }
}


runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'mixin.debug.export', 'true'
        systemProperty 'forge.logging.console.level', 'info'
        systemProperty 'journeymap.map_testing', 'true'
//        ideaModule "${rootProject.name}.${project.name}.main"
        modSource project.sourceSets.main
    }

    client {
        workingDirectory project.file('run/client')
//        taskName 'Client'
    }

    server {
        workingDirectory project.file('run/server')
//        taskName 'Server'
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${project.neoforge_version}"
    runtimeOnly "curse.maven:journeymap-${project.jm_project_id}:${project.forge_jm_file_id}"

    compileOnly project(":common")
    testmodImplementation sourceSets.main.output
}

/* Replace tokens in resources files */
processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft_version

    // replace stuff in mods.toml on copy
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version,
                'mcversion': project.minecraft_version,
                'modVersion': modVersion
    }
}

/* Use the same compile and runtime classpath in the Example Mod */
sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}


jar {
    manifest {
        attributes = ["Manifest-Version"      : "1.0",
//                "FMLModType"            : "GAMELIBRARY",
                      "Implementation-Title"  : project.title,
                      "Implementation-Version": project.version,
                      "Implementation-URL"    : project.git_website]
    }
}

/* Javadoc properties */
javadoc {
    title = project.title_javadoc
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

publishing {
    repositories {
        maven {
            name = "JourneyMap"
            url = uri("https://jm.gserv.me/repository/maven-snapshots/")

            credentials {
                username = project.findProperty("journeymap.user") ?: System.getenv("JOURNEYMAP_USER")
                password = project.findProperty("journeymap.password") ?: System.getenv("JOURNEYMAP_PASSWORD")
            }

            version = project.version
        }
    }

    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar

            artifact project.sourcesJar {
                archiveClassifier.set("sources")
            }

            artifact project.javadocJar {
                archiveClassifier.set("javadoc")
            }
        }
    }
}
